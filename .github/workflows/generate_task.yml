name: Generate Task

on:
  workflow_dispatch:
    inputs:
      theme:
        description: 'Theme for the new task'
        required: true
        default: 'Create a simple game application that includes the following functionalities: player movement, scoring system, and enemy interactions.'
      difficulty:
        description: 'Difficulty level for the new task'
        required: true
        type: choice
        options:
          - medium
        default: medium
      language:
        description: 'Natural language for the task description'
        required: true
        default: 'English'
      learning_goals:
        description: 'Learning goals for the new task (provide as bullet points)'
        required: true
        default: '* Understanding arrays\n* Working with loops'

permissions:
  contents: write  
  pull-requests: write

jobs:
  generate-task-introduction:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai pytz

      - name: Generate task introduction
        id: generate-task-introduction
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TASK_THEME: ${{ github.event.inputs.theme }}
          TASK_LANGUAGE: ${{ github.event.inputs.language }}
          LEARNING_GOALS: ${{ github.event.inputs.learning_goals }}
        run: |
          python scripts/generate_task_introduction.py "${{ secrets.OPENAI_TOKEN }}"

      - name: Set branch name
        id: set-branch-name
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          echo "branch_name=${branch}" >> $GITHUB_OUTPUT

  generate-task-modules:
    runs-on: ubuntu-latest
    needs: generate-task-introduction
    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-task-introduction.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Generate task modules
        id: generate-task-modules
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TASK_LANGUAGE: ${{ github.event.inputs.language }}
          LEARNING_GOALS: ${{ github.event.inputs.learning_goals }}
        run: |
          python scripts/generate_task_modules.py "${{ secrets.OPENAI_TOKEN }}"

      - name: Set branch name
        id: set-branch-name
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          echo "branch_name=${branch}" >> $GITHUB_OUTPUT

  generate-solution:
    runs-on: ubuntu-latest
    needs: generate-task-modules
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-task-modules.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Generate solutions
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/generate_solution.py "${{ secrets.OPENAI_TOKEN }}" "${{ needs.generate-task-modules.outputs.branch_name }}"

      - name: Set branch name
        id: set-branch-name
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          echo "branch_name=${branch}" >> $GITHUB_OUTPUT

  adversarial-review:
    runs-on: ubuntu-latest
    needs: generate-solution
    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-solution.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Adversarial Review - Improve Solution
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/adversarial_solution.py "${{ secrets.OPENAI_TOKEN }}" "tasks/new_task.md" ".hidden_tasks"

      - name: Set branch name
        id: set-branch-name
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          if [ -z "$branch" ]; then
            echo "branch_name=default-branch" >> $GITHUB_OUTPUT
          else
            echo "branch_name=${branch}" >> $GITHUB_OUTPUT
          fi

  generate-tests:
    runs-on: ubuntu-latest
    needs: generate-solution
    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-solution.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Generate tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/generate_tests.py "${{ secrets.OPENAI_TOKEN }}" "${{ needs.generate-solution.outputs.branch_name }}"

      - name: Set branch name
        id: set-branch-name
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          if [ -z "$branch" ]; then
            echo "branch_name=default-branch" >> $GITHUB_OUTPUT
          else
            echo "branch_name=${branch}" >> $GITHUB_OUTPUT
          fi

  adversarial-test-review:
    runs-on: ubuntu-latest
    needs: generate-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-tests.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Adversarial Review - Improve Tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/adversarial_tests.py "${{ secrets.OPENAI_TOKEN }}" "gen_test/"

  generate-template-code:
    runs-on: ubuntu-latest
    needs: adversarial-review
    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.adversarial-review.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Generate template code
        id: generate-template-code
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/generate_template_code.py "${{ secrets.OPENAI_TOKEN }}" "${{ needs.adversarial-review.outputs.branch_name }}"

      - name: Set branch name
        id: set-branch-name
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          if [ -z "$branch" ]; then
            echo "branch_name=default-branch" >> $GITHUB_OUTPUT
          else
            echo "branch_name=${branch}" >> $GITHUB_OUTPUT
          fi
